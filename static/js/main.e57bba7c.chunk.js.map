{"version":3,"sources":["components/helpers/Defaults.js","components/helpers/index.js","components/Item.js","components/ItemList.js","components/Group.js","store/Reducer.js","components/GroupList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["defaultItem","checkedItemValue","item","name","checkedItemKey","Math","random","isNotStringOrIsHTTP","stringItem","slice","Item","listKeys","Object","keys","forEach","element","className","map","key","entryKey","substring","toUpperCase","replace","entryValue","itemContent","ItemList","currentGroupName","useSelector","state","currentGroup","data","loading","Group","onGroupClick","groupName","onClick","redux","require","changeToGroup","group","type","initialState","people","planets","films","species","vehicles","starships","store","createStore","oldData","action","newData","cloneDeep","payload","dispatch","GroupList","console","log","groups","useDispatch","changeToGroupOnStore","changeLoadingOnStore","loadingState","changeLoading","askAPIForGroup","setReturnedDataFronAPI","groupData","loadGroupFromAPI","loadGroupToStore","axios","get","then","res","results","catch","err","groupKey","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e57bba7c.chunk.js","sourcesContent":["const defaultItemsList = [\r\n\t{ key: 1, description: \"This is task\", class: 1 },\r\n\t{ key: 2, description: \"This is tasker\", class: 2 },\r\n\t{ key: 3, description: \"This is taskererst\", class: 3 },\r\n];\r\n\r\nconst defaultItem = {};\r\n\r\nfunction defaultGroups() {\r\n\treturn {\r\n\t\tpeople: null,\r\n\t\tplanets: null,\r\n\t\tfilms: null,\r\n\t\tspecies: null,\r\n\t\tvehicles: null,\r\n\t\tstarships: null,\r\n\t};\r\n}\r\n\r\nfunction defaultGroup() {\r\n\treturn null;\r\n}\r\n\r\nexport { defaultItemsList, defaultItem, defaultGroups, defaultGroup };\r\n","import { defaultItem } from \"./Defaults.js\";\r\n\r\nfunction checkedItemValue(item) {\r\n\tif (typeof item !== \"object\") {\r\n\t\treturn defaultItem;\r\n\t}\r\n\titem.name = typeof item.name === \"string\" ? item.name : defaultItem.name;\r\n\treturn item;\r\n}\r\n\r\nfunction checkedItemKey(item) {\r\n\tlet key = item.name ? `${item.name}${Math.random() * 100}` : Math.random();\r\n\treturn key;\r\n}\r\n\r\nfunction isNotStringOrIsHTTP(stringItem) {\r\n\tif (typeof stringItem !== \"string\") {\r\n\t\treturn true;\r\n\t}\r\n\treturn stringItem.slice(0, 4) === \"http\" ? true : false;\r\n}\r\n\r\nexport { checkedItemValue, checkedItemKey, isNotStringOrIsHTTP };\r\n","import React from \"react\";\r\nimport { checkedItemKey } from \"./helpers\";\r\nimport { isNotStringOrIsHTTP } from \"./helpers\";\r\n\r\nfunction Item({ item }) {\r\n\tconst listKeys = Object.keys(item);\r\n\r\n\tlistKeys.forEach((element) => {});\r\n\r\n\tfunction itemContent(key) {\r\n\t\tconst entryKey = `${key.substring(0, 1).toUpperCase()}${key.substring(1)}`.replace(\"_\", \" \");\r\n\t\tconst entryValue = `${item[key].substring(0, 1).toUpperCase()}${item[key].substring(\r\n\t\t\t1\r\n\t\t)}`.replace(\"_\", \" \");\r\n\t\treturn isNotStringOrIsHTTP(item[key]) ? null : `${entryKey}:  ${entryValue}`;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li className='item'>\r\n\t\t\t{listKeys.map((key) => {\r\n\t\t\t\tif (!isNotStringOrIsHTTP(item[key])) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<span key={checkedItemKey(key)} className={`${key}`}>\r\n\t\t\t\t\t\t\t{itemContent(key)}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t})}\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\nexport default Item;\r\n\r\n/* useEffect(() => console.log(\"item : name is \", item), []); */\r\n/* useEffect(() => console.log(items), [items]); */\r\n\r\n/* function setDescriptionOf(e, item, newItemsSet) {\r\n\t\tnewItemsSet[newItemsSet.findIndex((oldItem) => item.key === oldItem.key)].description =\r\n\t\t\te.target.value;\r\n\t\treturn newItemsSet;\r\n\t} */\r\n\r\n/* function onChange(changeItem, e, item) {\r\n\t\tsetTasks(changeItem(e, task, cloneDeep(items)));\r\n\t} */\r\n\r\n/* \treturn tasks.map((task, i) => {\r\n\t\treturn (\r\n\t\t\t<li className='task' key={task.key}>\r\n\t\t\t\t<div className='taskClass'>o</div>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName='task-description'\r\n\t\t\t\t\tonChange={(e) => onChange(setDescriptionOf, e, task)}\r\n\t\t\t\t\tvalue={task.description}\r\n\t\t\t\t/>\r\n\t\t\t</li>\r\n\t\t);\r\n\t}); */\r\n","import React, { useState, useReducer } from \"react\";\r\nimport Item from \"./Item.js\";\r\nimport { defaultItemsList } from \"./helpers/Defaults.js\";\r\nimport { checkedItemValue, checkedItemKey } from \"./helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction ItemList() {\r\n\tconst currentGroupName = useSelector((state) => state.currentGroup);\r\n\tconst data = useSelector((state) => state.data);\r\n\tconst loading = useSelector((state) => state.loading);\r\n\r\n\t/* dispalyItems = data[currentGroupName] === null ? defaultItemsList : dispalyItems; */\r\n\t/* console.log(\"---------------------------------\");\r\n\tconsole.log(\"loading? : \" + loading);\r\n\tconsole.log(\"currentGroupName : \" + currentGroupName);\r\n\tconsole.log(\"data : \", data); */\r\n\r\n\tfunction displayMode() {\r\n\t\tif (currentGroupName === null) {\r\n\t\t\treturn <div className='items-loading-screen'>Please select group</div>;\r\n\t\t} else if (data[currentGroupName] !== null) {\r\n\t\t\treturn data[currentGroupName].map((item) => (\r\n\t\t\t\t<Item key={checkedItemKey(item)} item={checkedItemValue(item)} />\r\n\t\t\t));\r\n\t\t} else if (loading === true) {\r\n\t\t\treturn <div className='items-loading-screen'>LOADING</div>;\r\n\t\t}\r\n\t}\r\n\r\n\treturn <ul className='item-list'>{displayMode()}</ul>;\r\n}\r\n\r\nexport default ItemList;\r\n\r\n/* \r\nfetch(\"https://swapi.py4e.com/api/people/1\")\r\n\t.then(function (response) {\r\n\t\tresponse.json().then(function (data) {\r\n\t\t\tconsole.log(data);\r\n\t\t});\r\n\t})\r\n\t.catch(function (err) {\r\n\t\tconsole.log(\"bug!\", err);\r\n\t});\r\n */\r\n","import React from \"react\";\r\n\r\nfunction Group({ onGroupClick, groupName }) {\r\n\treturn (\r\n\t\t<div className='group' onClick={() => onGroupClick(groupName)}>\r\n\t\t\t{groupName}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Group;\r\n","import cloneDeep from \"lodash/cloneDeep\";\r\nimport { defaultGroups, defaultGroup } from \"../components/helpers/Defaults\";\r\n\r\nconst redux = require(\"redux\");\r\n\r\n/* function addTask(group = \"default\", task = defaultGroup()) {\r\n\treturn { type: \"ADD_TASK\", group: group, task: task };\r\n} */\r\n\r\nfunction changeToGroup(group = defaultGroup()) {\r\n\treturn { type: \"CHANGE_GROUP_TO\", group: group };\r\n}\r\n\r\nfunction loadGroupFromAPI(group, groupName = defaultGroup()) {\r\n\treturn { type: \"ADD_GROUP_FROM_API\", group: group, groupName: groupName };\r\n}\r\n\r\nfunction changeLoading(loadingState) {\r\n\treturn { type: \"CHANGE_LOADING\", payload: loadingState };\r\n}\r\n\r\nconst initialState = {\r\n\tcurrentGroup: null,\r\n\tdata: defaultGroups(),\r\n\tloading: false,\r\n};\r\n\r\nfunction Reducer(oldData = initialState, action) {\r\n\tconst newData = cloneDeep(oldData);\r\n\r\n\tswitch (action.type) {\r\n\t\tcase \"CHANGE_GROUP_TO\":\r\n\t\t\tnewData.currentGroup = action.group;\r\n\t\t\t/* console.log(\"newData\", newData); */\r\n\t\t\treturn newData;\r\n\t\tcase \"ADD_GROUP_FROM_API\":\r\n\t\t\tnewData.data[action.groupName] = action.group;\r\n\t\t\t/* console.log(action.groupName);\r\n\t\t\tconsole.log(\"1newData.data\", newData.data); */\r\n\t\t\t/* setTimeout(console.log(\"2newData.data\", newData.data), 0); */\r\n\t\t\treturn newData;\r\n\t\tcase \"CHANGE_LOADING\":\r\n\t\t\tnewData.loading = action.payload;\r\n\t\t\treturn newData;\r\n\t\tdefault:\r\n\t\t\treturn oldData;\r\n\t}\r\n}\r\n\r\nconst store = redux.createStore(Reducer);\r\nstore.dispatch(changeToGroup(\"people\"));\r\n\r\nexport { changeToGroup, loadGroupFromAPI, changeLoading };\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\nimport Group from \"./Group.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { changeToGroup, loadGroupFromAPI, changeLoading } from \"../store/Reducer.js\";\r\n\r\nfunction GroupList() {\r\n\tconsole.log(\"--------------------GL---------------------\");\r\n\r\n\tconst groups = useSelector((state) => state.data);\r\n\t/* const currentGroup = useSelector((state) => state.currentGroup);\r\n\tconst loading = useSelector((state) => state.loading); */\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst changeToGroupOnStore = (groupName) => dispatch(changeToGroup(groupName));\r\n\tconst loadGroupToStore = (groupData, groupName) =>\r\n\t\tdispatch(loadGroupFromAPI(groupData, groupName));\r\n\tconst changeLoadingOnStore = (loadingState) => dispatch(changeLoading(loadingState));\r\n\r\n\tfunction askAPIForGroup(groupName) {\r\n\t\tfunction setReturnedDataFronAPI(groupName, groupData) {\r\n\t\t\tloadGroupToStore(groupData, groupName);\r\n\t\t\tchangeToGroupOnStore(groupName);\r\n\t\t\tchangeLoadingOnStore(false);\r\n\t\t\tconsole.log(\"new data from API is : \", groupData);\r\n\t\t}\r\n\r\n\t\tchangeLoadingOnStore(true);\r\n\t\tconst currentAPI = \"https://swapi.py4e.com/api/\"; // TMP - THIS NEEDS TO COME FROM HELPERS\r\n\r\n\t\taxios\r\n\t\t\t.get(`${currentAPI}${groupName}`)\r\n\t\t\t.then((res) => setReturnedDataFronAPI(groupName, res.data.results))\r\n\t\t\t.catch((err) => console.log(\"err loading from API\", err));\r\n\t}\r\n\r\n\tfunction onGroupClick(groupName) {\r\n\t\tgroups[groupName] ? changeToGroupOnStore(groupName) : askAPIForGroup(groupName);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='group-list'>\r\n\t\t\t{Object.keys(groups).map((groupKey) => (\r\n\t\t\t\t<Group key={groupKey} onGroupClick={onGroupClick} groupName={groupKey} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default GroupList;\r\n","import React /*,  { useState, useEffect } */ from \"react\";\r\nimport ItemList from \"./ItemList.js\";\r\nimport GroupList from \"./GroupList.js\";\r\n\r\nfunction Main() {\r\n\t/* const [currentItems, setCurrentItems] = useState(); */\r\n\r\n\t/* function getAndSetData(data) {\r\n\t\taxios.get(data).then((res) => setCurrentItems(res.data.results));\r\n\t} */\r\n\r\n\t/* useEffect(() => getAndSetData(\"https://api.jsonbin.io/b/5eabe07e66e603359fe1bb8a/3\"), []); */\r\n\t/* useEffect(() => {\r\n\t\tcurrentItems ? console.log(\"ci= \", currentItems[0].name) : console.log(\"not there yet\");\r\n\t}, [currentItems]); */\r\n\r\n\treturn (\r\n\t\t<div className='interface'>\r\n\t\t\t<GroupList />\r\n\t\t\t<ItemList />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\n\n/* const stuffFromAPI = { name: \"Johnny cash\", name: \"Luke kage\", name: \"Sly Stallone\" };\n\nconst splitStr = (str) => str.split(` `);\n\nconst findMachingWordInArr = (arr) => arr.find((x) => x === \"is\");\n\nconst pipe = (...fns) => (arg) => fns.reduce((a, b) => b(a), arg);\n\nconst findWordInString = pipe(splitStr, findMachingWordInArr);\nconsole.log(\"findWordInString is \" + findWordInString);\n\nconst splitThis = findWordInString(\"This is one\");\n\nconsole.log(\"splitThis\", splitThis); \n\nfunction findFirstNameInObj(name, obj) {\n\tconst namesArr = Object.values(obj);\n\tnamesArr.find((name) => {});\n}\n*/\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='app-header'>MAY THE 4TH BE WITH YOU</header>\n\t\t\t<Main />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/Reducer.js\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}